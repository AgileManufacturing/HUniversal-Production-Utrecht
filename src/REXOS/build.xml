<project name="REXOS" default="all" basedir=".">
	<!-- java source root -->
	<property name="rexos-java-root" value="${basedir}"/>

	<!-- git repo root -->
	<property name="repo-root" value="${rexos-java-root}/../.."/>
	<!-- Specify the folder in which the binaries will be placed. -->
	<property name="buildpath" value="${repo-root}/build/REXOS/"/>
	<!-- Specify the location of the export classpath file. -->
	<property name="export-classpath-file" value="${buildpath}/.export-classpath"/>
	<!-- Add a reference to the global environment -->
	<property environment="env"/>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${repo-root}/src/REXOS/external_libraries/ant-contrib.jar" />
		</classpath>
	</taskdef>
	
	
	<!-- Macro for the following things:
	- load current classpath
	- echo the current building dir
	- make the bin directory
	- running javac command using the classpath
	- adding currently build source to the classpath
	-->
	<macrodef name="buildjava">
   		<attribute name="dir"/>
		
   		<sequential>
			<echo>*** Attempting to compile dir @{dir} ***${line.separator}</echo>

			<pathconvert property="relative.dir">
				<path location="@{dir}"/>
				<globmapper from="${rexos-java-root}/*" to="*" />
			</pathconvert>

   			<loadfile property="classpath" srcFile="${buildpath}/.export-classpath"/>
   			<mkdir dir="${buildpath}/${relative.dir}"/>
  
			<javac srcdir="@{dir}" includeantruntime="true" destdir="${buildpath}" classpath="${classpath}" encoding="ISO-8859-1">
				<compilerarg line="-Xlint:unchecked" />
			</javac>
   			
			<!--<antcall target="add-path-to-classpath">
				<param name="path" value="${buildpath}/${relative.dir}"/>
			</antcall>-->
		</sequential>
	</macrodef>

	<!-- Macro for the following things:
	- echo the current cleaning dir
	- deleting the bin directory
	-->
	<macrodef name="cleanjava">
   		<attribute name="dir"/>
   		<sequential>
   			<pathconvert property="relative.dir">
				<path location="@{dir}"/>
				<globmapper from="${rexos-java-root}/*" to="*" />
			</pathconvert>
			<echo>*** Cleaning:  ${buildpath}/${relative.dir}***${line.separator}</echo>
   			<delete dir="${buildpath}/${relative.dir}"/>
		</sequential>
	</macrodef>

	<!-- Creates the base export file, initialized to the current classpath -->
	<target name="create-base-export-file">
		<!-- Delete old file -->
		<delete file="${export-classpath-file}" />
		<!-- Set value of CLASSPATH to "" if it doesn exist. -->
		<property name="env.CLASSPATH" value="" />
		<!-- Write current classpath to file -->
		<echo file="${export-classpath-file}" append="false" message="export CLASSPATH=${env.CLASSPATH}"/>
	</target>

	<!-- Target for adding a path to export classpath file if it isn't already in there. Requires param path.-->
	<target name="add-path-to-classpath">
	 	<!--<condition property="path.inFile">	
			<resourcecontains resource="${export-classpath-file}" substring="${path}" />
		</condition>-->
		<antcall target="write-path-to-export-file"/>
	</target>

	<!-- Target for writing a path to the export classpath file. Requires param path and path.inFile. -->
	<target name="write-path-to-export-file" unless="${path.inFile}">
		<echo file="${export-classpath-file}" append="true" message=":${path}"/>
		<echo message="adding ${path} to classpath"/>
	</target>

	<!-- Target for adding a library jar to the export classpath file if it isn't already in there. Requires param jar. -->
	<target name="add-jar-to-classpath">
		<echo>*** Adding JAR to classpath ${jar} -- ${rexos-java-root}/external_libraries/${jar} ***${line.separator}</echo>
		<antcall target="add-path-to-classpath">
			<param name="path" value="${rexos-java-root}/external_libraries/${jar}"/>
		</antcall>
	</target>

	<!-- default target, handles the classpath file and calls the allpackages target -->
	<target name="all">
		<mkdir dir="${buildpath}"/>
		<delete file ="${buildpath}/.export-classpath"/> 
 		<touch file ="${buildpath}/.export-classpath"/> 
		<antcall target="allpackages"/>
		<antcall target="add-path-to-classpath">
			<param name="path" value="${buildpath}/"/>
		</antcall>
	</target>
	
	<!-- allpackages target, add the required targets to depends -->
	<target name="allpackages" depends="MAS, HAL, generic, util"/>

	<target name="MAS" depends="util, generic, HAL">
		<ant antfile="build.xml" target="all" dir="MAS" inheritAll="true" inheritRefs="true" useNativeBasedir="true"/>
	</target>

	<target name="HAL" depends="util, generic">
		<ant antfile="build.xml" target="all" dir="HAL" inheritAll="true" inheritRefs="true" useNativeBasedir="true"/>
	</target>

	<target name="util" depends="">
   		<ant antfile="build.xml" target="all" dir="util" inheritAll="true" inheritRefs="true" useNativeBasedir="true"/>
	</target>

	<target name="generic">
   		<ant antfile="build.xml" target="all" dir="generic" inheritAll="true" inheritRefs="true" useNativeBasedir="true"/>
	</target>

	<target name="MASSIM" depends="allpackages">
		<ant antfile="build.xml" target="simulation" dir="MAS" inheritAll="true" inheritRefs="true" useNativeBasedir="true"/>
	</target>

	<!-- clean target, cleans rexos -->
	<target name="clean">	
		<delete file="${export-classpath-file}" />
		<delete dir="${buildpath}" />
		<ant antfile="build.xml" target="clean" dir="MAS" inheritAll="true" inheritRefs="true" useNativeBasedir="true"/>
		<ant antfile="build.xml" target="clean" dir="HAL" inheritAll="true" inheritRefs="true" useNativeBasedir="true"/>
		<ant antfile="build.xml" target="clean" dir="generic" inheritAll="true" inheritRefs="true" useNativeBasedir="true"/>  
		<ant antfile="build.xml" target="clean" dir="util" inheritAll="true" inheritRefs="true" useNativeBasedir="true"/>  
	</target>
		
	<target name="Launch">
		<loadfile property="classpath-file-content" srcfile="${export-classpath-file}"/>
		<java classname="jade.Boot" failonerror="true" fork="yes">
			<env key="PROPERTIESPATH" value="${repo-root}/src/REXOS/MAS/configuration/"/>
			<env key="MSGPATH" value="${repo-root}/ACLMsgs/"/>
			<arg line="-platform-id Grid -container-name GridAgents -gui -agents &quot;MainAgent :agents.main_agent.MainAgent&quot;"/>
			<classpath refid="java" />
			<classpath>
				<pathelement path="${classpath-file-content}" />
			</classpath>
		</java>
	</target>
	
	<target name="Launch-Grid">
		<loadfile property="classpath-file-content" srcfile="${export-classpath-file}"/>
		<java classname="jade.Boot" failonerror="true" fork="yes">
			<env key="PROPERTIESPATH" value="${repo-root}/src/REXOS/MAS/configuration/"/>
			<env key="MSGPATH" value="${repo-root}/ACLMsgs/"/>
			<arg line="-platform-id Grid -container-name GridAgents -gui -agents Logistics:agents.logistics_agent.LogisticsAgent"/>
			<classpath refid="java" />
			<classpath>
				<pathelement path="${classpath-file-content}" />
			</classpath>
		</java>
	</target>
	
	<target name="Launch-EQ">
		<property name="gridhost" value="${gridhost}"/>
		<property name="equipletnumber" value="${equipletnumber}"/>
		<property name="localip" value="${localip}"/>
		<property name="gridip" value=""/>
		<property name="gridport" value=""/>
		<script language="javascript">
			var gridhostport = project.getProperty("gridhost");
			project.setProperty("gridip", gridhostport.split(":")[0]);
			project.setProperty("gridport", gridhostport.split(":")[1]);
		</script>
		<loadfile property="classpath-file-content" srcfile="${export-classpath-file}"/>
		<java classname="jade.Boot" failonerror="true" fork="yes">
			<env key="PROPERTIESPATH" value="${repo-root}/src/REXOS/MAS/configuration/"/>
			<env key="MSGPATH" value="${repo-root}/ACLMsgs/"/>
			<arg line="-container -container-name 'Equiplet ${equipletnumber}' -local-host ${localip} -host ${gridip} -port ${gridport} EQ${equipletnumber}:agents.equiplet_agent.EquipletAgent"/>
			<!-- get local public ip? Probably from a config file / run script to get it for the first time -->
			<classpath refid="java" />
			<classpath>
				<pathelement path="${classpath-file-content}" />
			</classpath>
		</java>
	</target>

	<target name="Launch-HAL">
		<loadfile property="classpath-file-content" srcfile="${export-classpath-file}"/>
		<java classname="HAL.testerClasses.HALTesterClassPickAndPlace" failonerror="true" fork="yes">
			<env key="PROPERTIESPATH" value="${repo-root}/src/REXOS/util/configuration/"/>
			<classpath refid="java" />
			<classpath>
				<pathelement path="${classpath-file-content}" />
			</classpath>
		</java>
	</target>
	
	<target name="Generate-JARs" depends="HAL">
		<foreach target="Generate-JAR" param="theFile">
			<path id="modulesPathId">
				<fileset dir="${repo-root}/build/REXOS/HAL/modules" casesensitive="yes">
					<include name="**/*.class"/>
				</fileset>
			</path>
		</foreach>
		<foreach target="Generate-JAR" param="theFile">
			<path id="capabilitiesPathId">
				<fileset dir="${repo-root}/build/REXOS/HAL/capabilities" casesensitive="yes">
					<include name="**/*.class"/>
				</fileset>
			</path>
		</foreach>
	</target>
	
	<target name="Generate-JAR">
		<basename property="jar.filename" file="${theFile}" suffix=".class"/>
		<dirname property="jar.basedir" file="${repo-root}/build/REXOS/HAL/"/>
		<jar destfile="${repo-root}/jars/${jar.filename}.jar" basedir="${jar.basedir}" includes="**/${jar.filename}.class"/>
	</target>
	
	<path id="java">
		<pathelement location="${output}"/>
		<fileset dir="external_libraries">
		<include name="*.jar"/>
		</fileset>
	</path>

	<target name="emurex">
    	<jar destfile="../../simulation/simulation.jar" basedir="../../build/REXOS/" includes="**" excludes="**/Test.class"/>
	</target>
</project>
