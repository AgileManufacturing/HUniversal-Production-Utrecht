package HAL.steps;

import HAL.Module;
import HAL.ModuleIdentifier;

import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;

/**
 * A HardwareStep is a step that is completely translated and can be processed by the ROS node corresponding to this HardwareStep.
 * HardwareSteps are generated by {@link Module}s and interpeted by ROS.
 * @author Bas Voskuijlen
 *
 */
public class HardwareStep {
	public enum HardwareStepStatus {
		DONE,
		FAILED,
		IN_PROGRESS,
		WAITING
	}
	
	public static final String COMMAND = "command";
	public static final String INSTRUCTION_DATA = "instructionData";
	public static final String PAYLOAD = "payload";
	public static final String STATUS = "status";
	public static final String MODULE_IDENTIFIER = "moduleIdentifier";
	
	/*
	public static final String MODULE_IDENTIFIER_MANUFACTURER = "manufacturer";
	public static final String MODULE_IDENTIFIER_TYPE_NUMBER = "typeNumber";
	public static final String MODULE_IDENTIFIER_SERIAL_NUMBER = "serialNumber";
*/

	private ModuleIdentifier moduleIdentifier;
	private CompositeStep compositeStep;
	private HardwareStepStatus hardwareStepStatus;

	private JsonObject instructionData;
	private OriginPlacement originPlacement;

	
	public HardwareStep(ModuleIdentifier moduleIdentifier, CompositeStep compositeStep, HardwareStepStatus hardwareStepStatus, JsonObject instructionData) {
		javaIsGayConstructor(moduleIdentifier, compositeStep, hardwareStepStatus, instructionData, null);
	}
	public HardwareStep(ModuleIdentifier moduleIdentifier, CompositeStep compositeStep, HardwareStepStatus hardwareStepStatus, JsonObject instructionData, OriginPlacement originPlacement) {
		javaIsGayConstructor(moduleIdentifier, compositeStep, hardwareStepStatus, instructionData, originPlacement);
	}
	
	private void javaIsGayConstructor(ModuleIdentifier moduleIdentifier, CompositeStep compositeStep, HardwareStepStatus hardwareStepStatus, JsonObject instructionData, OriginPlacement originPlacement) {
		this.moduleIdentifier = moduleIdentifier;
		this.compositeStep = compositeStep;
		this.instructionData = instructionData;
		this.hardwareStepStatus = hardwareStepStatus;
		this.originPlacement = originPlacement;
	}
	
	/*public HardwareStep(CompositeStep compositeStep, JsonObject rosCommand, ModuleIdentifier moduleIdentifier) {
		this.moduleIdentifier = moduleIdentifier;
		//this.rosCommand = rosCommand;
		this.compositeStep = compositeStep;
	}*/
	
	

	public ModuleIdentifier getModuleIdentifier() {
		return this.moduleIdentifier;
	}
	public CompositeStep getCompositeStep() {
		return this.compositeStep;
	}
	public HardwareStepStatus getHardwareStepStatus() {
		return this.hardwareStepStatus;
	}
	public JsonObject getInstructionData() {
		return this.instructionData;
	}
	public OriginPlacement getOriginPlacement() {
		return this.originPlacement;
	}
	
	
	public JsonObject toJSON() {
		
		JsonObject returnValue = new JsonObject();
		returnValue.add(MODULE_IDENTIFIER, moduleIdentifier.toJSON());
		
		returnValue.add(STATUS, new JsonPrimitive(hardwareStepStatus.toString()));
		
		JsonObject instuctionDataNew = new JsonObject();
		if(this.instructionData.has("move")){
			instuctionDataNew.add("command", new JsonPrimitive("move"));
			instuctionDataNew.add("look_up", new JsonPrimitive("FIND_ID"));
			
			
			JsonElement lookUpParametersID = getCompositeStep().getRelativeTo().get("look_up");
			
			JsonObject lookUpParameters = new JsonObject();
			lookUpParameters.add("ID", lookUpParametersID.getAsJsonPrimitive());
			instuctionDataNew.add("look_up_parameters", lookUpParameters);
			
			
			JsonObject payLoad = new JsonObject();
			JsonObject move = this.instructionData.getAsJsonObject("move");

			
			payLoad.add("x", move.get("x"));
			payLoad.add("y", move.get("y"));
			payLoad.add("z", move.get("z"));
			payLoad.add("maxAcceleration", move.get("maxAcceleration"));
			if(this.instructionData.has("rotate")) {
				JsonObject rotate = this.instructionData.getAsJsonObject("rotate");
				payLoad.add("rotationX", rotate.get("x"));
				payLoad.add("rotationY", rotate.get("y"));
				payLoad.add("rotationZ", rotate.get("z"));
			}
			
			instuctionDataNew.add("payload", payLoad);
			
			
			returnValue.add(INSTRUCTION_DATA, instuctionDataNew);
			
			System.out.println("HardwareStep JSON: " + returnValue.toString());

		} else if(this.instructionData.has("activate")){
			instuctionDataNew.add("command", new JsonPrimitive("activate"));
			returnValue.add(INSTRUCTION_DATA, instuctionDataNew);

		}
		else if(this.instructionData.has("deactivate") ){
			instuctionDataNew.add("command", new JsonPrimitive("deactivate"));
			returnValue.add(INSTRUCTION_DATA, instuctionDataNew);
		} else {
			System.out.println("NOTFOUND: "+this.instructionData.toString());
		}
		System.out.println("RETURNVALUE: "+returnValue.toString());
		return returnValue;
	}
	
}
