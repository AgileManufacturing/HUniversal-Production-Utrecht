// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "BlackboardClient/PostIt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nl {
namespace hu {
namespace lcv {
namespace blackboard {
namespace data {

namespace {

const ::google::protobuf::Descriptor* PostIt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostIt_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostItBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostItBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* PostItBox_Filter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PostItBox_Filter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PostIt_2eproto() {
  protobuf_AddDesc_PostIt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PostIt.proto");
  GOOGLE_CHECK(file != NULL);
  PostIt_descriptor_ = file->message_type(0);
  static const int PostIt_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostIt, timestep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostIt, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostIt, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostIt, isprocessed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostIt, ordinal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostIt, productref_),
  };
  PostIt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostIt_descriptor_,
      PostIt::default_instance_,
      PostIt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostIt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostIt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostIt));
  PostItBox_descriptor_ = file->message_type(1);
  static const int PostItBox_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItBox, iswrite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItBox, zone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItBox, postits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItBox, readowner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItBox, currenttimestep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItBox, filter_),
  };
  PostItBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostItBox_descriptor_,
      PostItBox::default_instance_,
      PostItBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostItBox));
  PostItBox_Filter_descriptor_ = PostItBox_descriptor_->nested_type(0);
  static const int PostItBox_Filter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItBox_Filter, filtername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItBox_Filter, agentname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItBox_Filter, deadline_),
  };
  PostItBox_Filter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PostItBox_Filter_descriptor_,
      PostItBox_Filter::default_instance_,
      PostItBox_Filter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItBox_Filter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PostItBox_Filter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PostItBox_Filter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PostIt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostIt_descriptor_, &PostIt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostItBox_descriptor_, &PostItBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PostItBox_Filter_descriptor_, &PostItBox_Filter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PostIt_2eproto() {
  delete PostIt::default_instance_;
  delete PostIt_reflection_;
  delete PostItBox::default_instance_;
  delete PostItBox_reflection_;
  delete PostItBox_Filter::default_instance_;
  delete PostItBox_Filter_reflection_;
}

void protobuf_AddDesc_PostIt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014PostIt.proto\022\031nl.hu.lcv.blackboard.dat"
    "a\"t\n\006PostIt\022\020\n\010timestep\030\001 \001(\003\022\017\n\007payload"
    "\030\002 \002(\t\022\r\n\005owner\030\003 \001(\t\022\023\n\013isProcessed\030\004 \001"
    "(\010\022\017\n\007ordinal\030\005 \001(\005\022\022\n\nproductRef\030\006 \001(\t\""
    "\212\002\n\tPostItBox\022\017\n\007isWrite\030\001 \002(\010\022\014\n\004zone\030\002"
    " \002(\t\0222\n\007postIts\030\003 \003(\0132!.nl.hu.lcv.blackb"
    "oard.data.PostIt\022\021\n\treadOwner\030\004 \001(\t\022\027\n\017c"
    "urrentTimeStep\030\005 \001(\003\022;\n\006filter\030\006 \001(\0132+.n"
    "l.hu.lcv.blackboard.data.PostItBox.Filte"
    "r\032A\n\006Filter\022\022\n\nfiltername\030\001 \002(\t\022\021\n\tagent"
    "name\030\002 \003(\t\022\020\n\010deadline\030\003 \001(\003B)\n\031nl.hu.lc"
    "v.blackboard.dataB\014PostItProtos", 471);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PostIt.proto", &protobuf_RegisterTypes);
  PostIt::default_instance_ = new PostIt();
  PostItBox::default_instance_ = new PostItBox();
  PostItBox_Filter::default_instance_ = new PostItBox_Filter();
  PostIt::default_instance_->InitAsDefaultInstance();
  PostItBox::default_instance_->InitAsDefaultInstance();
  PostItBox_Filter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PostIt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PostIt_2eproto {
  StaticDescriptorInitializer_PostIt_2eproto() {
    protobuf_AddDesc_PostIt_2eproto();
  }
} static_descriptor_initializer_PostIt_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int PostIt::kTimestepFieldNumber;
const int PostIt::kPayloadFieldNumber;
const int PostIt::kOwnerFieldNumber;
const int PostIt::kIsProcessedFieldNumber;
const int PostIt::kOrdinalFieldNumber;
const int PostIt::kProductRefFieldNumber;
#endif  // !_MSC_VER

PostIt::PostIt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostIt::InitAsDefaultInstance() {
}

PostIt::PostIt(const PostIt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostIt::SharedCtor() {
  _cached_size_ = 0;
  timestep_ = GOOGLE_LONGLONG(0);
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isprocessed_ = false;
  ordinal_ = 0;
  productref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostIt::~PostIt() {
  SharedDtor();
}

void PostIt::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (owner_ != &::google::protobuf::internal::kEmptyString) {
    delete owner_;
  }
  if (productref_ != &::google::protobuf::internal::kEmptyString) {
    delete productref_;
  }
  if (this != default_instance_) {
  }
}

void PostIt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostIt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostIt_descriptor_;
}

const PostIt& PostIt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PostIt_2eproto();  return *default_instance_;
}

PostIt* PostIt::default_instance_ = NULL;

PostIt* PostIt::New() const {
  return new PostIt;
}

void PostIt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestep_ = GOOGLE_LONGLONG(0);
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    if (has_owner()) {
      if (owner_ != &::google::protobuf::internal::kEmptyString) {
        owner_->clear();
      }
    }
    isprocessed_ = false;
    ordinal_ = 0;
    if (has_productref()) {
      if (productref_ != &::google::protobuf::internal::kEmptyString) {
        productref_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostIt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestep = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestep_)));
          set_has_timestep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }
      
      // required string payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->payload().data(), this->payload().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_owner;
        break;
      }
      
      // optional string owner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_owner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->owner().data(), this->owner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isProcessed;
        break;
      }
      
      // optional bool isProcessed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isProcessed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isprocessed_)));
          set_has_isprocessed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ordinal;
        break;
      }
      
      // optional int32 ordinal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ordinal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ordinal_)));
          set_has_ordinal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_productRef;
        break;
      }
      
      // optional string productRef = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productRef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productref()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productref().data(), this->productref().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostIt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 timestep = 1;
  if (has_timestep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestep(), output);
  }
  
  // required string payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->payload(), output);
  }
  
  // optional string owner = 3;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->owner(), output);
  }
  
  // optional bool isProcessed = 4;
  if (has_isprocessed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isprocessed(), output);
  }
  
  // optional int32 ordinal = 5;
  if (has_ordinal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ordinal(), output);
  }
  
  // optional string productRef = 6;
  if (has_productref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productref().data(), this->productref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->productref(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostIt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 timestep = 1;
  if (has_timestep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timestep(), target);
  }
  
  // required string payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payload().data(), this->payload().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->payload(), target);
  }
  
  // optional string owner = 3;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->owner().data(), this->owner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->owner(), target);
  }
  
  // optional bool isProcessed = 4;
  if (has_isprocessed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isprocessed(), target);
  }
  
  // optional int32 ordinal = 5;
  if (has_ordinal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ordinal(), target);
  }
  
  // optional string productRef = 6;
  if (has_productref()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productref().data(), this->productref().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->productref(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostIt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timestep = 1;
    if (has_timestep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestep());
    }
    
    // required string payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payload());
    }
    
    // optional string owner = 3;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner());
    }
    
    // optional bool isProcessed = 4;
    if (has_isprocessed()) {
      total_size += 1 + 1;
    }
    
    // optional int32 ordinal = 5;
    if (has_ordinal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ordinal());
    }
    
    // optional string productRef = 6;
    if (has_productref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productref());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostIt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostIt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostIt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostIt::MergeFrom(const PostIt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestep()) {
      set_timestep(from.timestep());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_isprocessed()) {
      set_isprocessed(from.isprocessed());
    }
    if (from.has_ordinal()) {
      set_ordinal(from.ordinal());
    }
    if (from.has_productref()) {
      set_productref(from.productref());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostIt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostIt::CopyFrom(const PostIt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostIt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  return true;
}

void PostIt::Swap(PostIt* other) {
  if (other != this) {
    std::swap(timestep_, other->timestep_);
    std::swap(payload_, other->payload_);
    std::swap(owner_, other->owner_);
    std::swap(isprocessed_, other->isprocessed_);
    std::swap(ordinal_, other->ordinal_);
    std::swap(productref_, other->productref_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostIt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostIt_descriptor_;
  metadata.reflection = PostIt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PostItBox_Filter::kFilternameFieldNumber;
const int PostItBox_Filter::kAgentnameFieldNumber;
const int PostItBox_Filter::kDeadlineFieldNumber;
#endif  // !_MSC_VER

PostItBox_Filter::PostItBox_Filter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostItBox_Filter::InitAsDefaultInstance() {
}

PostItBox_Filter::PostItBox_Filter(const PostItBox_Filter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostItBox_Filter::SharedCtor() {
  _cached_size_ = 0;
  filtername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deadline_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostItBox_Filter::~PostItBox_Filter() {
  SharedDtor();
}

void PostItBox_Filter::SharedDtor() {
  if (filtername_ != &::google::protobuf::internal::kEmptyString) {
    delete filtername_;
  }
  if (this != default_instance_) {
  }
}

void PostItBox_Filter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostItBox_Filter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostItBox_Filter_descriptor_;
}

const PostItBox_Filter& PostItBox_Filter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PostIt_2eproto();  return *default_instance_;
}

PostItBox_Filter* PostItBox_Filter::default_instance_ = NULL;

PostItBox_Filter* PostItBox_Filter::New() const {
  return new PostItBox_Filter;
}

void PostItBox_Filter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filtername()) {
      if (filtername_ != &::google::protobuf::internal::kEmptyString) {
        filtername_->clear();
      }
    }
    deadline_ = GOOGLE_LONGLONG(0);
  }
  agentname_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostItBox_Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filtername = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filtername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filtername().data(), this->filtername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_agentname;
        break;
      }
      
      // repeated string agentname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agentname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_agentname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agentname(0).data(), this->agentname(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_agentname;
        if (input->ExpectTag(24)) goto parse_deadline;
        break;
      }
      
      // optional int64 deadline = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadline_)));
          set_has_deadline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostItBox_Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string filtername = 1;
  if (has_filtername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filtername().data(), this->filtername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filtername(), output);
  }
  
  // repeated string agentname = 2;
  for (int i = 0; i < this->agentname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->agentname(i).data(), this->agentname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->agentname(i), output);
  }
  
  // optional int64 deadline = 3;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->deadline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostItBox_Filter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string filtername = 1;
  if (has_filtername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filtername().data(), this->filtername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filtername(), target);
  }
  
  // repeated string agentname = 2;
  for (int i = 0; i < this->agentname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agentname(i).data(), this->agentname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->agentname(i), target);
  }
  
  // optional int64 deadline = 3;
  if (has_deadline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->deadline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostItBox_Filter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string filtername = 1;
    if (has_filtername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filtername());
    }
    
    // optional int64 deadline = 3;
    if (has_deadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deadline());
    }
    
  }
  // repeated string agentname = 2;
  total_size += 1 * this->agentname_size();
  for (int i = 0; i < this->agentname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->agentname(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostItBox_Filter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostItBox_Filter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostItBox_Filter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostItBox_Filter::MergeFrom(const PostItBox_Filter& from) {
  GOOGLE_CHECK_NE(&from, this);
  agentname_.MergeFrom(from.agentname_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filtername()) {
      set_filtername(from.filtername());
    }
    if (from.has_deadline()) {
      set_deadline(from.deadline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostItBox_Filter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostItBox_Filter::CopyFrom(const PostItBox_Filter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostItBox_Filter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void PostItBox_Filter::Swap(PostItBox_Filter* other) {
  if (other != this) {
    std::swap(filtername_, other->filtername_);
    agentname_.Swap(&other->agentname_);
    std::swap(deadline_, other->deadline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostItBox_Filter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostItBox_Filter_descriptor_;
  metadata.reflection = PostItBox_Filter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int PostItBox::kIsWriteFieldNumber;
const int PostItBox::kZoneFieldNumber;
const int PostItBox::kPostItsFieldNumber;
const int PostItBox::kReadOwnerFieldNumber;
const int PostItBox::kCurrentTimeStepFieldNumber;
const int PostItBox::kFilterFieldNumber;
#endif  // !_MSC_VER

PostItBox::PostItBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PostItBox::InitAsDefaultInstance() {
  filter_ = const_cast< ::nl::hu::lcv::blackboard::data::PostItBox_Filter*>(&::nl::hu::lcv::blackboard::data::PostItBox_Filter::default_instance());
}

PostItBox::PostItBox(const PostItBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PostItBox::SharedCtor() {
  _cached_size_ = 0;
  iswrite_ = false;
  zone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  readowner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  currenttimestep_ = GOOGLE_LONGLONG(0);
  filter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PostItBox::~PostItBox() {
  SharedDtor();
}

void PostItBox::SharedDtor() {
  if (zone_ != &::google::protobuf::internal::kEmptyString) {
    delete zone_;
  }
  if (readowner_ != &::google::protobuf::internal::kEmptyString) {
    delete readowner_;
  }
  if (this != default_instance_) {
    delete filter_;
  }
}

void PostItBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PostItBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PostItBox_descriptor_;
}

const PostItBox& PostItBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PostIt_2eproto();  return *default_instance_;
}

PostItBox* PostItBox::default_instance_ = NULL;

PostItBox* PostItBox::New() const {
  return new PostItBox;
}

void PostItBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iswrite_ = false;
    if (has_zone()) {
      if (zone_ != &::google::protobuf::internal::kEmptyString) {
        zone_->clear();
      }
    }
    if (has_readowner()) {
      if (readowner_ != &::google::protobuf::internal::kEmptyString) {
        readowner_->clear();
      }
    }
    currenttimestep_ = GOOGLE_LONGLONG(0);
    if (has_filter()) {
      if (filter_ != NULL) filter_->::nl::hu::lcv::blackboard::data::PostItBox_Filter::Clear();
    }
  }
  postits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PostItBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isWrite = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswrite_)));
          set_has_iswrite();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_zone;
        break;
      }
      
      // required string zone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zone().data(), this->zone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_postIts;
        break;
      }
      
      // repeated .nl.hu.lcv.blackboard.data.PostIt postIts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postIts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_postits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_postIts;
        if (input->ExpectTag(34)) goto parse_readOwner;
        break;
      }
      
      // optional string readOwner = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_readOwner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_readowner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->readowner().data(), this->readowner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_currentTimeStep;
        break;
      }
      
      // optional int64 currentTimeStep = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentTimeStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &currenttimestep_)));
          set_has_currenttimestep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_filter;
        break;
      }
      
      // optional .nl.hu.lcv.blackboard.data.PostItBox.Filter filter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PostItBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isWrite = 1;
  if (has_iswrite()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iswrite(), output);
  }
  
  // required string zone = 2;
  if (has_zone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->zone(), output);
  }
  
  // repeated .nl.hu.lcv.blackboard.data.PostIt postIts = 3;
  for (int i = 0; i < this->postits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->postits(i), output);
  }
  
  // optional string readOwner = 4;
  if (has_readowner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->readowner().data(), this->readowner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->readowner(), output);
  }
  
  // optional int64 currentTimeStep = 5;
  if (has_currenttimestep()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->currenttimestep(), output);
  }
  
  // optional .nl.hu.lcv.blackboard.data.PostItBox.Filter filter = 6;
  if (has_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->filter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PostItBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isWrite = 1;
  if (has_iswrite()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iswrite(), target);
  }
  
  // required string zone = 2;
  if (has_zone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zone().data(), this->zone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->zone(), target);
  }
  
  // repeated .nl.hu.lcv.blackboard.data.PostIt postIts = 3;
  for (int i = 0; i < this->postits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->postits(i), target);
  }
  
  // optional string readOwner = 4;
  if (has_readowner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->readowner().data(), this->readowner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->readowner(), target);
  }
  
  // optional int64 currentTimeStep = 5;
  if (has_currenttimestep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->currenttimestep(), target);
  }
  
  // optional .nl.hu.lcv.blackboard.data.PostItBox.Filter filter = 6;
  if (has_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->filter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PostItBox::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isWrite = 1;
    if (has_iswrite()) {
      total_size += 1 + 1;
    }
    
    // required string zone = 2;
    if (has_zone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zone());
    }
    
    // optional string readOwner = 4;
    if (has_readowner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->readowner());
    }
    
    // optional int64 currentTimeStep = 5;
    if (has_currenttimestep()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->currenttimestep());
    }
    
    // optional .nl.hu.lcv.blackboard.data.PostItBox.Filter filter = 6;
    if (has_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filter());
    }
    
  }
  // repeated .nl.hu.lcv.blackboard.data.PostIt postIts = 3;
  total_size += 1 * this->postits_size();
  for (int i = 0; i < this->postits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->postits(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PostItBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PostItBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PostItBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PostItBox::MergeFrom(const PostItBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  postits_.MergeFrom(from.postits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iswrite()) {
      set_iswrite(from.iswrite());
    }
    if (from.has_zone()) {
      set_zone(from.zone());
    }
    if (from.has_readowner()) {
      set_readowner(from.readowner());
    }
    if (from.has_currenttimestep()) {
      set_currenttimestep(from.currenttimestep());
    }
    if (from.has_filter()) {
      mutable_filter()->::nl::hu::lcv::blackboard::data::PostItBox_Filter::MergeFrom(from.filter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PostItBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PostItBox::CopyFrom(const PostItBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostItBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < postits_size(); i++) {
    if (!this->postits(i).IsInitialized()) return false;
  }
  if (has_filter()) {
    if (!this->filter().IsInitialized()) return false;
  }
  return true;
}

void PostItBox::Swap(PostItBox* other) {
  if (other != this) {
    std::swap(iswrite_, other->iswrite_);
    std::swap(zone_, other->zone_);
    postits_.Swap(&other->postits_);
    std::swap(readowner_, other->readowner_);
    std::swap(currenttimestep_, other->currenttimestep_);
    std::swap(filter_, other->filter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PostItBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PostItBox_descriptor_;
  metadata.reflection = PostItBox_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace blackboard
}  // namespace lcv
}  // namespace hu
}  // namespace nl

// @@protoc_insertion_point(global_scope)
