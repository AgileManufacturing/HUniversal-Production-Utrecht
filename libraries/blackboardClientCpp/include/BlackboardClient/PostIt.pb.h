// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PostIt.proto

#ifndef PROTOBUF_PostIt_2eproto__INCLUDED
#define PROTOBUF_PostIt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace nl {
namespace hu {
namespace lcv {
namespace blackboard {
namespace data {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PostIt_2eproto();
void protobuf_AssignDesc_PostIt_2eproto();
void protobuf_ShutdownFile_PostIt_2eproto();

class PostIt;
class PostItBox;
class PostItBox_Filter;

// ===================================================================

class PostIt : public ::google::protobuf::Message {
 public:
  PostIt();
  virtual ~PostIt();
  
  PostIt(const PostIt& from);
  
  inline PostIt& operator=(const PostIt& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PostIt& default_instance();
  
  void Swap(PostIt* other);
  
  // implements Message ----------------------------------------------
  
  PostIt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PostIt& from);
  void MergeFrom(const PostIt& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 timestep = 1;
  inline bool has_timestep() const;
  inline void clear_timestep();
  static const int kTimestepFieldNumber = 1;
  inline ::google::protobuf::int64 timestep() const;
  inline void set_timestep(::google::protobuf::int64 value);
  
  // required string payload = 2;
  inline bool has_payload() const;
  inline void clear_payload();
  static const int kPayloadFieldNumber = 2;
  inline const ::std::string& payload() const;
  inline void set_payload(const ::std::string& value);
  inline void set_payload(const char* value);
  inline void set_payload(const char* value, size_t size);
  inline ::std::string* mutable_payload();
  inline ::std::string* release_payload();
  
  // optional string owner = 3;
  inline bool has_owner() const;
  inline void clear_owner();
  static const int kOwnerFieldNumber = 3;
  inline const ::std::string& owner() const;
  inline void set_owner(const ::std::string& value);
  inline void set_owner(const char* value);
  inline void set_owner(const char* value, size_t size);
  inline ::std::string* mutable_owner();
  inline ::std::string* release_owner();
  
  // optional bool isProcessed = 4;
  inline bool has_isprocessed() const;
  inline void clear_isprocessed();
  static const int kIsProcessedFieldNumber = 4;
  inline bool isprocessed() const;
  inline void set_isprocessed(bool value);
  
  // optional int32 ordinal = 5;
  inline bool has_ordinal() const;
  inline void clear_ordinal();
  static const int kOrdinalFieldNumber = 5;
  inline ::google::protobuf::int32 ordinal() const;
  inline void set_ordinal(::google::protobuf::int32 value);
  
  // optional string productRef = 6;
  inline bool has_productref() const;
  inline void clear_productref();
  static const int kProductRefFieldNumber = 6;
  inline const ::std::string& productref() const;
  inline void set_productref(const ::std::string& value);
  inline void set_productref(const char* value);
  inline void set_productref(const char* value, size_t size);
  inline ::std::string* mutable_productref();
  inline ::std::string* release_productref();
  
  // @@protoc_insertion_point(class_scope:nl.hu.lcv.blackboard.data.PostIt)
 private:
  inline void set_has_timestep();
  inline void clear_has_timestep();
  inline void set_has_payload();
  inline void clear_has_payload();
  inline void set_has_owner();
  inline void clear_has_owner();
  inline void set_has_isprocessed();
  inline void clear_has_isprocessed();
  inline void set_has_ordinal();
  inline void clear_has_ordinal();
  inline void set_has_productref();
  inline void clear_has_productref();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 timestep_;
  ::std::string* payload_;
  ::std::string* owner_;
  bool isprocessed_;
  ::google::protobuf::int32 ordinal_;
  ::std::string* productref_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_PostIt_2eproto();
  friend void protobuf_AssignDesc_PostIt_2eproto();
  friend void protobuf_ShutdownFile_PostIt_2eproto();
  
  void InitAsDefaultInstance();
  static PostIt* default_instance_;
};
// -------------------------------------------------------------------

class PostItBox_Filter : public ::google::protobuf::Message {
 public:
  PostItBox_Filter();
  virtual ~PostItBox_Filter();
  
  PostItBox_Filter(const PostItBox_Filter& from);
  
  inline PostItBox_Filter& operator=(const PostItBox_Filter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PostItBox_Filter& default_instance();
  
  void Swap(PostItBox_Filter* other);
  
  // implements Message ----------------------------------------------
  
  PostItBox_Filter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PostItBox_Filter& from);
  void MergeFrom(const PostItBox_Filter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string filtername = 1;
  inline bool has_filtername() const;
  inline void clear_filtername();
  static const int kFilternameFieldNumber = 1;
  inline const ::std::string& filtername() const;
  inline void set_filtername(const ::std::string& value);
  inline void set_filtername(const char* value);
  inline void set_filtername(const char* value, size_t size);
  inline ::std::string* mutable_filtername();
  inline ::std::string* release_filtername();
  
  // repeated string agentname = 2;
  inline int agentname_size() const;
  inline void clear_agentname();
  static const int kAgentnameFieldNumber = 2;
  inline const ::std::string& agentname(int index) const;
  inline ::std::string* mutable_agentname(int index);
  inline void set_agentname(int index, const ::std::string& value);
  inline void set_agentname(int index, const char* value);
  inline void set_agentname(int index, const char* value, size_t size);
  inline ::std::string* add_agentname();
  inline void add_agentname(const ::std::string& value);
  inline void add_agentname(const char* value);
  inline void add_agentname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& agentname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_agentname();
  
  // optional int64 deadline = 3;
  inline bool has_deadline() const;
  inline void clear_deadline();
  static const int kDeadlineFieldNumber = 3;
  inline ::google::protobuf::int64 deadline() const;
  inline void set_deadline(::google::protobuf::int64 value);
  
  // @@protoc_insertion_point(class_scope:nl.hu.lcv.blackboard.data.PostItBox.Filter)
 private:
  inline void set_has_filtername();
  inline void clear_has_filtername();
  inline void set_has_deadline();
  inline void clear_has_deadline();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* filtername_;
  ::google::protobuf::RepeatedPtrField< ::std::string> agentname_;
  ::google::protobuf::int64 deadline_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_PostIt_2eproto();
  friend void protobuf_AssignDesc_PostIt_2eproto();
  friend void protobuf_ShutdownFile_PostIt_2eproto();
  
  void InitAsDefaultInstance();
  static PostItBox_Filter* default_instance_;
};
// -------------------------------------------------------------------

class PostItBox : public ::google::protobuf::Message {
 public:
  PostItBox();
  virtual ~PostItBox();
  
  PostItBox(const PostItBox& from);
  
  inline PostItBox& operator=(const PostItBox& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PostItBox& default_instance();
  
  void Swap(PostItBox* other);
  
  // implements Message ----------------------------------------------
  
  PostItBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PostItBox& from);
  void MergeFrom(const PostItBox& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef PostItBox_Filter Filter;
  
  // accessors -------------------------------------------------------
  
  // required bool isWrite = 1;
  inline bool has_iswrite() const;
  inline void clear_iswrite();
  static const int kIsWriteFieldNumber = 1;
  inline bool iswrite() const;
  inline void set_iswrite(bool value);
  
  // required string zone = 2;
  inline bool has_zone() const;
  inline void clear_zone();
  static const int kZoneFieldNumber = 2;
  inline const ::std::string& zone() const;
  inline void set_zone(const ::std::string& value);
  inline void set_zone(const char* value);
  inline void set_zone(const char* value, size_t size);
  inline ::std::string* mutable_zone();
  inline ::std::string* release_zone();
  
  // repeated .nl.hu.lcv.blackboard.data.PostIt postIts = 3;
  inline int postits_size() const;
  inline void clear_postits();
  static const int kPostItsFieldNumber = 3;
  inline const ::nl::hu::lcv::blackboard::data::PostIt& postits(int index) const;
  inline ::nl::hu::lcv::blackboard::data::PostIt* mutable_postits(int index);
  inline ::nl::hu::lcv::blackboard::data::PostIt* add_postits();
  inline const ::google::protobuf::RepeatedPtrField< ::nl::hu::lcv::blackboard::data::PostIt >&
      postits() const;
  inline ::google::protobuf::RepeatedPtrField< ::nl::hu::lcv::blackboard::data::PostIt >*
      mutable_postits();
  
  // optional string readOwner = 4;
  inline bool has_readowner() const;
  inline void clear_readowner();
  static const int kReadOwnerFieldNumber = 4;
  inline const ::std::string& readowner() const;
  inline void set_readowner(const ::std::string& value);
  inline void set_readowner(const char* value);
  inline void set_readowner(const char* value, size_t size);
  inline ::std::string* mutable_readowner();
  inline ::std::string* release_readowner();
  
  // optional int64 currentTimeStep = 5;
  inline bool has_currenttimestep() const;
  inline void clear_currenttimestep();
  static const int kCurrentTimeStepFieldNumber = 5;
  inline ::google::protobuf::int64 currenttimestep() const;
  inline void set_currenttimestep(::google::protobuf::int64 value);
  
  // optional .nl.hu.lcv.blackboard.data.PostItBox.Filter filter = 6;
  inline bool has_filter() const;
  inline void clear_filter();
  static const int kFilterFieldNumber = 6;
  inline const ::nl::hu::lcv::blackboard::data::PostItBox_Filter& filter() const;
  inline ::nl::hu::lcv::blackboard::data::PostItBox_Filter* mutable_filter();
  inline ::nl::hu::lcv::blackboard::data::PostItBox_Filter* release_filter();
  
  // @@protoc_insertion_point(class_scope:nl.hu.lcv.blackboard.data.PostItBox)
 private:
  inline void set_has_iswrite();
  inline void clear_has_iswrite();
  inline void set_has_zone();
  inline void clear_has_zone();
  inline void set_has_readowner();
  inline void clear_has_readowner();
  inline void set_has_currenttimestep();
  inline void clear_has_currenttimestep();
  inline void set_has_filter();
  inline void clear_has_filter();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* zone_;
  ::google::protobuf::RepeatedPtrField< ::nl::hu::lcv::blackboard::data::PostIt > postits_;
  ::std::string* readowner_;
  ::google::protobuf::int64 currenttimestep_;
  ::nl::hu::lcv::blackboard::data::PostItBox_Filter* filter_;
  bool iswrite_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_PostIt_2eproto();
  friend void protobuf_AssignDesc_PostIt_2eproto();
  friend void protobuf_ShutdownFile_PostIt_2eproto();
  
  void InitAsDefaultInstance();
  static PostItBox* default_instance_;
};
// ===================================================================


// ===================================================================

// PostIt

// optional int64 timestep = 1;
inline bool PostIt::has_timestep() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PostIt::set_has_timestep() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PostIt::clear_has_timestep() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PostIt::clear_timestep() {
  timestep_ = GOOGLE_LONGLONG(0);
  clear_has_timestep();
}
inline ::google::protobuf::int64 PostIt::timestep() const {
  return timestep_;
}
inline void PostIt::set_timestep(::google::protobuf::int64 value) {
  set_has_timestep();
  timestep_ = value;
}

// required string payload = 2;
inline bool PostIt::has_payload() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PostIt::set_has_payload() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PostIt::clear_has_payload() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PostIt::clear_payload() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    payload_->clear();
  }
  clear_has_payload();
}
inline const ::std::string& PostIt::payload() const {
  return *payload_;
}
inline void PostIt::set_payload(const ::std::string& value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void PostIt::set_payload(const char* value) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(value);
}
inline void PostIt::set_payload(const char* value, size_t size) {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  payload_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PostIt::mutable_payload() {
  set_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    payload_ = new ::std::string;
  }
  return payload_;
}
inline ::std::string* PostIt::release_payload() {
  clear_has_payload();
  if (payload_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = payload_;
    payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string owner = 3;
inline bool PostIt::has_owner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PostIt::set_has_owner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PostIt::clear_has_owner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PostIt::clear_owner() {
  if (owner_ != &::google::protobuf::internal::kEmptyString) {
    owner_->clear();
  }
  clear_has_owner();
}
inline const ::std::string& PostIt::owner() const {
  return *owner_;
}
inline void PostIt::set_owner(const ::std::string& value) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  owner_->assign(value);
}
inline void PostIt::set_owner(const char* value) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  owner_->assign(value);
}
inline void PostIt::set_owner(const char* value, size_t size) {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  owner_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PostIt::mutable_owner() {
  set_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    owner_ = new ::std::string;
  }
  return owner_;
}
inline ::std::string* PostIt::release_owner() {
  clear_has_owner();
  if (owner_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = owner_;
    owner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isProcessed = 4;
inline bool PostIt::has_isprocessed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PostIt::set_has_isprocessed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PostIt::clear_has_isprocessed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PostIt::clear_isprocessed() {
  isprocessed_ = false;
  clear_has_isprocessed();
}
inline bool PostIt::isprocessed() const {
  return isprocessed_;
}
inline void PostIt::set_isprocessed(bool value) {
  set_has_isprocessed();
  isprocessed_ = value;
}

// optional int32 ordinal = 5;
inline bool PostIt::has_ordinal() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PostIt::set_has_ordinal() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PostIt::clear_has_ordinal() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PostIt::clear_ordinal() {
  ordinal_ = 0;
  clear_has_ordinal();
}
inline ::google::protobuf::int32 PostIt::ordinal() const {
  return ordinal_;
}
inline void PostIt::set_ordinal(::google::protobuf::int32 value) {
  set_has_ordinal();
  ordinal_ = value;
}

// optional string productRef = 6;
inline bool PostIt::has_productref() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PostIt::set_has_productref() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PostIt::clear_has_productref() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PostIt::clear_productref() {
  if (productref_ != &::google::protobuf::internal::kEmptyString) {
    productref_->clear();
  }
  clear_has_productref();
}
inline const ::std::string& PostIt::productref() const {
  return *productref_;
}
inline void PostIt::set_productref(const ::std::string& value) {
  set_has_productref();
  if (productref_ == &::google::protobuf::internal::kEmptyString) {
    productref_ = new ::std::string;
  }
  productref_->assign(value);
}
inline void PostIt::set_productref(const char* value) {
  set_has_productref();
  if (productref_ == &::google::protobuf::internal::kEmptyString) {
    productref_ = new ::std::string;
  }
  productref_->assign(value);
}
inline void PostIt::set_productref(const char* value, size_t size) {
  set_has_productref();
  if (productref_ == &::google::protobuf::internal::kEmptyString) {
    productref_ = new ::std::string;
  }
  productref_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PostIt::mutable_productref() {
  set_has_productref();
  if (productref_ == &::google::protobuf::internal::kEmptyString) {
    productref_ = new ::std::string;
  }
  return productref_;
}
inline ::std::string* PostIt::release_productref() {
  clear_has_productref();
  if (productref_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = productref_;
    productref_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// PostItBox_Filter

// required string filtername = 1;
inline bool PostItBox_Filter::has_filtername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PostItBox_Filter::set_has_filtername() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PostItBox_Filter::clear_has_filtername() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PostItBox_Filter::clear_filtername() {
  if (filtername_ != &::google::protobuf::internal::kEmptyString) {
    filtername_->clear();
  }
  clear_has_filtername();
}
inline const ::std::string& PostItBox_Filter::filtername() const {
  return *filtername_;
}
inline void PostItBox_Filter::set_filtername(const ::std::string& value) {
  set_has_filtername();
  if (filtername_ == &::google::protobuf::internal::kEmptyString) {
    filtername_ = new ::std::string;
  }
  filtername_->assign(value);
}
inline void PostItBox_Filter::set_filtername(const char* value) {
  set_has_filtername();
  if (filtername_ == &::google::protobuf::internal::kEmptyString) {
    filtername_ = new ::std::string;
  }
  filtername_->assign(value);
}
inline void PostItBox_Filter::set_filtername(const char* value, size_t size) {
  set_has_filtername();
  if (filtername_ == &::google::protobuf::internal::kEmptyString) {
    filtername_ = new ::std::string;
  }
  filtername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PostItBox_Filter::mutable_filtername() {
  set_has_filtername();
  if (filtername_ == &::google::protobuf::internal::kEmptyString) {
    filtername_ = new ::std::string;
  }
  return filtername_;
}
inline ::std::string* PostItBox_Filter::release_filtername() {
  clear_has_filtername();
  if (filtername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = filtername_;
    filtername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string agentname = 2;
inline int PostItBox_Filter::agentname_size() const {
  return agentname_.size();
}
inline void PostItBox_Filter::clear_agentname() {
  agentname_.Clear();
}
inline const ::std::string& PostItBox_Filter::agentname(int index) const {
  return agentname_.Get(index);
}
inline ::std::string* PostItBox_Filter::mutable_agentname(int index) {
  return agentname_.Mutable(index);
}
inline void PostItBox_Filter::set_agentname(int index, const ::std::string& value) {
  agentname_.Mutable(index)->assign(value);
}
inline void PostItBox_Filter::set_agentname(int index, const char* value) {
  agentname_.Mutable(index)->assign(value);
}
inline void PostItBox_Filter::set_agentname(int index, const char* value, size_t size) {
  agentname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PostItBox_Filter::add_agentname() {
  return agentname_.Add();
}
inline void PostItBox_Filter::add_agentname(const ::std::string& value) {
  agentname_.Add()->assign(value);
}
inline void PostItBox_Filter::add_agentname(const char* value) {
  agentname_.Add()->assign(value);
}
inline void PostItBox_Filter::add_agentname(const char* value, size_t size) {
  agentname_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PostItBox_Filter::agentname() const {
  return agentname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PostItBox_Filter::mutable_agentname() {
  return &agentname_;
}

// optional int64 deadline = 3;
inline bool PostItBox_Filter::has_deadline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PostItBox_Filter::set_has_deadline() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PostItBox_Filter::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PostItBox_Filter::clear_deadline() {
  deadline_ = GOOGLE_LONGLONG(0);
  clear_has_deadline();
}
inline ::google::protobuf::int64 PostItBox_Filter::deadline() const {
  return deadline_;
}
inline void PostItBox_Filter::set_deadline(::google::protobuf::int64 value) {
  set_has_deadline();
  deadline_ = value;
}

// -------------------------------------------------------------------

// PostItBox

// required bool isWrite = 1;
inline bool PostItBox::has_iswrite() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PostItBox::set_has_iswrite() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PostItBox::clear_has_iswrite() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PostItBox::clear_iswrite() {
  iswrite_ = false;
  clear_has_iswrite();
}
inline bool PostItBox::iswrite() const {
  return iswrite_;
}
inline void PostItBox::set_iswrite(bool value) {
  set_has_iswrite();
  iswrite_ = value;
}

// required string zone = 2;
inline bool PostItBox::has_zone() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PostItBox::set_has_zone() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PostItBox::clear_has_zone() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PostItBox::clear_zone() {
  if (zone_ != &::google::protobuf::internal::kEmptyString) {
    zone_->clear();
  }
  clear_has_zone();
}
inline const ::std::string& PostItBox::zone() const {
  return *zone_;
}
inline void PostItBox::set_zone(const ::std::string& value) {
  set_has_zone();
  if (zone_ == &::google::protobuf::internal::kEmptyString) {
    zone_ = new ::std::string;
  }
  zone_->assign(value);
}
inline void PostItBox::set_zone(const char* value) {
  set_has_zone();
  if (zone_ == &::google::protobuf::internal::kEmptyString) {
    zone_ = new ::std::string;
  }
  zone_->assign(value);
}
inline void PostItBox::set_zone(const char* value, size_t size) {
  set_has_zone();
  if (zone_ == &::google::protobuf::internal::kEmptyString) {
    zone_ = new ::std::string;
  }
  zone_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PostItBox::mutable_zone() {
  set_has_zone();
  if (zone_ == &::google::protobuf::internal::kEmptyString) {
    zone_ = new ::std::string;
  }
  return zone_;
}
inline ::std::string* PostItBox::release_zone() {
  clear_has_zone();
  if (zone_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = zone_;
    zone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .nl.hu.lcv.blackboard.data.PostIt postIts = 3;
inline int PostItBox::postits_size() const {
  return postits_.size();
}
inline void PostItBox::clear_postits() {
  postits_.Clear();
}
inline const ::nl::hu::lcv::blackboard::data::PostIt& PostItBox::postits(int index) const {
  return postits_.Get(index);
}
inline ::nl::hu::lcv::blackboard::data::PostIt* PostItBox::mutable_postits(int index) {
  return postits_.Mutable(index);
}
inline ::nl::hu::lcv::blackboard::data::PostIt* PostItBox::add_postits() {
  return postits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::nl::hu::lcv::blackboard::data::PostIt >&
PostItBox::postits() const {
  return postits_;
}
inline ::google::protobuf::RepeatedPtrField< ::nl::hu::lcv::blackboard::data::PostIt >*
PostItBox::mutable_postits() {
  return &postits_;
}

// optional string readOwner = 4;
inline bool PostItBox::has_readowner() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PostItBox::set_has_readowner() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PostItBox::clear_has_readowner() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PostItBox::clear_readowner() {
  if (readowner_ != &::google::protobuf::internal::kEmptyString) {
    readowner_->clear();
  }
  clear_has_readowner();
}
inline const ::std::string& PostItBox::readowner() const {
  return *readowner_;
}
inline void PostItBox::set_readowner(const ::std::string& value) {
  set_has_readowner();
  if (readowner_ == &::google::protobuf::internal::kEmptyString) {
    readowner_ = new ::std::string;
  }
  readowner_->assign(value);
}
inline void PostItBox::set_readowner(const char* value) {
  set_has_readowner();
  if (readowner_ == &::google::protobuf::internal::kEmptyString) {
    readowner_ = new ::std::string;
  }
  readowner_->assign(value);
}
inline void PostItBox::set_readowner(const char* value, size_t size) {
  set_has_readowner();
  if (readowner_ == &::google::protobuf::internal::kEmptyString) {
    readowner_ = new ::std::string;
  }
  readowner_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PostItBox::mutable_readowner() {
  set_has_readowner();
  if (readowner_ == &::google::protobuf::internal::kEmptyString) {
    readowner_ = new ::std::string;
  }
  return readowner_;
}
inline ::std::string* PostItBox::release_readowner() {
  clear_has_readowner();
  if (readowner_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = readowner_;
    readowner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 currentTimeStep = 5;
inline bool PostItBox::has_currenttimestep() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PostItBox::set_has_currenttimestep() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PostItBox::clear_has_currenttimestep() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PostItBox::clear_currenttimestep() {
  currenttimestep_ = GOOGLE_LONGLONG(0);
  clear_has_currenttimestep();
}
inline ::google::protobuf::int64 PostItBox::currenttimestep() const {
  return currenttimestep_;
}
inline void PostItBox::set_currenttimestep(::google::protobuf::int64 value) {
  set_has_currenttimestep();
  currenttimestep_ = value;
}

// optional .nl.hu.lcv.blackboard.data.PostItBox.Filter filter = 6;
inline bool PostItBox::has_filter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PostItBox::set_has_filter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PostItBox::clear_has_filter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PostItBox::clear_filter() {
  if (filter_ != NULL) filter_->::nl::hu::lcv::blackboard::data::PostItBox_Filter::Clear();
  clear_has_filter();
}
inline const ::nl::hu::lcv::blackboard::data::PostItBox_Filter& PostItBox::filter() const {
  return filter_ != NULL ? *filter_ : *default_instance_->filter_;
}
inline ::nl::hu::lcv::blackboard::data::PostItBox_Filter* PostItBox::mutable_filter() {
  set_has_filter();
  if (filter_ == NULL) filter_ = new ::nl::hu::lcv::blackboard::data::PostItBox_Filter;
  return filter_;
}
inline ::nl::hu::lcv::blackboard::data::PostItBox_Filter* PostItBox::release_filter() {
  clear_has_filter();
  ::nl::hu::lcv::blackboard::data::PostItBox_Filter* temp = filter_;
  filter_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace data
}  // namespace blackboard
}  // namespace lcv
}  // namespace hu
}  // namespace nl

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PostIt_2eproto__INCLUDED
